// // ChatPrompt.module.scss

/*

<div className={styles.container}>
      <div className={styles.prompt}>
        <ScrollToBottom className={styles.promptArea}>
          <div className={styles.promptMessages}>
            {(messages || []).map((message, index) => {
              return (
                <div
                  key={index}
                  className={
                    message.type === 'user'
                      ? styles.promptMessageUser
                      : styles.promptMessageRoggen
                  }
                >
                  <p className={styles.promptMessageText}>{message.text}</p>
                  {
                    message.timestamp ? <p className={styles.promptMessageTimestamp}>
                      {new Date(message.timestamp).toLocaleDateString('en-US', {
                        // show date and time
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                        hour: 'numeric',
                        minute: 'numeric'

                      })}
                    </p> : null
                  }
                </div>
              );
            })}
            {isTyping && (
              <div className={styles.promptMessageRoggen}>
                <p>Roggen is typing...</p>
              </div>
            )}

          </div>
        </ScrollToBottom>
        <form className={styles.promptForm} onSubmit={handleSubmit}>
          <input
            className={styles.promptInput}
            type="text"
            value={input}
            onChange={handleInput}
            placeholder="Type your message here..."
          />
          <button className={styles.promptButton}
            // hidden
            style={{ display: 'none' }}
            type="submit">
            Send
          </button>
        </form>
      </div>
    </div >

    */

@import 'Colors.scss';

@keyframes message-pop-up {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.container {
  font-family: 'Manrope';
  padding: 0 2em;
  padding-top: 4em;
  color: $text-color;
}

.promptMessages p {
  animation: message-pop-up 1s ease-out;
}

.prompt {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.promptArea {
  flex-grow: 1;
  max-height: 60vh;
}

.promptForm {
  flex-shrink: 0;
}

.promptArea {
  position: relative;
  box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  background-color: $background-color;
  border-bottom-left-radius: 2px;
  border-bottom-right-radius: 2px;
  overflow: hidden;
  border: 1px solid $dark-color;
  overflow-y: scroll;
  &::-webkit-scrollbar {
    display: none;
  }
  -ms-overflow-style: none;
  scrollbar-width: none;
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.promptForm {
  padding: 3px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  // place form at bottom
  position: relative;

  bottom: -80%;
}

.promptInput {
  font-family: 'Manrope' !important;
  flex: 1;
  padding: 10px;
  border: none;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  background-color: transparent;
  background-color: $background-color;
  border: 1px solid $dark-color;
  border-radius: 10px;
  border-top-left-radius: 2px;
  border-top-right-radius: 2px;
  color: $text-color;
  font-size: 1.2rem;
  outline: none;
}

.promptInput:focus {
  border-bottom: 1px solid $primary-color;
}

.promptButton {
  display: none;
}

.promptMessageTimestamp {
  font-size: 0.8rem;
  color: $text-color;
  margin-top: 0.5em;
}

.promptMessageUser {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  margin: 1em;
  margin-right: 2em;
}

.promptMessageRoggen {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  margin: 1em;
  margin-left: 2em;
}
